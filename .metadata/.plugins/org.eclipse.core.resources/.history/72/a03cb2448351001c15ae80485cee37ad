<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>05.JSTL 개요</title>
</head>
<body>
	<h1>JSTL(Jsp Standard Tag Library)이란?</h1>
	
	<pre>
	JSP에서 사용하는 태그 라이브러리(커스텀 태그)
	
	JSP에서 자주 사용하거나 공통적으로 사용되는 코드를 쉽게 사용하기 위해 
	태그화 하여 표준으로 제공
	(if, for, 변수 선언, 파싱 등)
	
	</pre>
	
	<h3>라이브러리 등록방법</h3>
	<ol>
		<li>tomcat 접속</li>
		<li>라이브러리 다운</li>		
		<li>WEB_INF/lib 에 라이브러리 추가</li>		
	</ol>
	
	<hr>
	<h1> JSTL 사용을 위한 선언 방법</h1>
	<pre>
	JSTL을 사용하고자 하는 JSP가 있을 경우 해당 JSP 최상단에
	JSTL라이브러리를 추가하는 tablib 추가
	
	prefix : 접두사 . 다른태그와 구별할 수 있는 namespace (태그 앞에 붙는 태그명)
	
	url(Uniform Resource locator): 인터넷 특정자원 위치 지정
	
	uri(Uniform Resource identifier) : 네트워크 상에서 자원을 구별하는 식별자 (자원을 구분하는 유일한 주소)
	-> uri에 작성하는 주소는 웹상 주소가 아닌 다운로드한 라이브러리 상의 내부 구분 주소
	</pre>
	
	<hr>
	<h3>1.변수선언 c:set </h3>
	<pre>
	변수를 선언하고 초기화(무조건 수행)하는 JSTL tag
	- c:set 태그로 선언된 변수는 EL태그를 이용해 출력가능
	
	특징
	1.변수 type을 지정하지 않는다.
	2.변수의 범위(scope)를 지정할 수있다.
	
	var : 변수명
	value : 저장할 값
	scope : scope 범위 
	</pre>
	
	<% String str = "hello"; %> 
	str : <%= str %>
	<br>
	<c:set var="str2" value="world"></c:set>
	str2 : ${str2}
	
	<h4>scope 지정하기</h4>
	<c:set var="num1" value="100"/> <!-- scope 기본값은 page -->
	<c:set var="num2" value="200" scope="request"/>
	num1+num2 = ${num1 + num2}<br>
	
	requestScope.num1 + requestScope.num2 = ${requestScope.num1 + requestScope.num2} <br>
	pageScope.num1 + requestScope.num2 = ${pageScope.num1 + requestScope.num2} <br>
	
	<hr>
	<h3>2. 변수 삭제 c:remove</h3>
	<pre>
	지정한 변수를 특정 scope 또는 모든 scope에서 제거
	
	사용 예) 게시글 작성 시 오류발생하여 작성페이지로 돌아갔을떼 작성한 글이 모두 삭제됨을 해결하기 위해
	session의 글 내용을 임시 저장 후 정상적으로 작성완료 되면 임시저장된 글의 내용을 삭제
	</pre>
	
	1) session에 변수 선언 후 제거 확인 <br>
	<c:set var="num3" value="300" scope="session"/>
	num3 삭제 전 : ${sessionScope.num3} <br>
	<c:remove var="num3" scope="session"/> <!--session의 num3제거  -->
	num3 삭제 후 : ${sessionScope.num3} <br>
	<br>
	2) 모든 scope에서 제거 확인 <br>
	<c:set var="num4" value="400"/> <!-- page scope -->
	<c:set var="num4" value="4000" scope="request"/> 
	<c:set var="num4" value="40000" scope="session"/>
	<c:set var="num4" value="400000" scope="application"/> 
	
	num4 삭제 전 전체 출력 : ${num4} / ${requestScope.num4} / ${sessionScope.num4} / ${applicationScope.num4} <br>
	
	<c:remove var="num4"/>
	num4 삭제 후 전체 출력 : ${num4} / ${requestScope.num4} / ${sessionScope.num4} / ${applicationScope.num4} <br>
	
	<hr>
	<h3>3.조건문 - if  c:if</h3>
	<pre>
	if문을 태그 형식으로 작성한 것
	**별도의 else구문이 존재하지 않음
	
	test : 조건을 작성하는 속성.  EL형식으로만 작성가능 
	</pre>
	
	<!-- 변수 선언 -->
	<c:set var="test1" value="10"/>
	<c:set var="test1" value="20"/>
	
	<!--c:if의 사용  -->
	<c:if test="${test1 > test2}">
		test1이 더 크다
	</c:if>
	
	<!-- else구문이 없으므로 필요시 반대 조건의 c:if 작성 -->
	<c:if test="${test1 <= test2}">
		test2이 더 크다
	</c:if>	
	
	
	
	
</body>
</html>